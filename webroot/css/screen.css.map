{"version":3,"sources":["css/mixins/_mixin.sass","css/mixins/_custom.sass","css/mixins/_breakpoint.sass","css/screen.sass"],"names":[],"mappings":"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","file":"screen.css","sourcesContent":["////\n/// @author Matthieu Aussaguel\n/// @group sass-css3-mixins\n////\n\n/// Adds a browser prefix to the property\n/// @param {*} $property Property\n/// @param {*} $value Value\n\n@mixin css3-prefix($property, $value) {\n  -webkit-#{$property}: #{$value};\n  -khtml-#{$property}: #{$value};\n  -moz-#{$property}: #{$value};\n  -ms-#{$property}: #{$value};\n  -o-#{$property}: #{$value};\n  #{$property}: #{$value}; }\n\n/// Background Gradient\n/// @param {Color} $startColor [#3C3C3C] - Start Color\n/// @param {Color} $endColor [#999999] - End Color\n\n@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {\n  background-color: $startColor;\n  background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));\n  background-image: -webkit-linear-gradient(top, $startColor, $endColor);\n  background-image: -moz-linear-gradient(top, $startColor, $endColor);\n  background-image: -ms-linear-gradient(top, $startColor, $endColor);\n  background-image: -o-linear-gradient(top, $startColor, $endColor);\n  background-image: linear-gradient(top, $startColor, $endColor);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}'); }\n\n/// Background Horizontal\n/// @param {Color} $startColor [#3C3C3C] - Start Color\n/// @param {Color} $endColor [#999999] - End Color\n\n@mixin background-horizontal($startColor: #3C3C3C, $endColor: #999999) {\n  background-color: $startColor;\n  background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));\n  background-image: -webkit-linear-gradient(left, $startColor, $endColor);\n  background-image: -moz-linear-gradient(left, $startColor, $endColor);\n  background-image: -ms-linear-gradient(left, $startColor, $endColor);\n  background-image: -o-linear-gradient(left, $startColor, $endColor);\n  background-image: linear-gradient(left, $startColor, $endColor);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}', gradientType='1'); }\n\n/// Background Radial\n/// @param {Color} $startColor [#3C3C3C] - Start Color\n/// @param {Percentage} $startPos [0%] - Start position\n/// @param {Color} $endColor [#999999] - End Color\n/// @param {Percentage} $endPos [100%] - End position\n\n@mixin background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos: 100%) {\n  background: -moz-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);\n  background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos, $startColor), color-stop($endPos, $endColor));\n  background: -webkit-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);\n  background: -o-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);\n  background: -ms-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);\n  background: radial-gradient(ellipse at center, $startColor $startPos, $endColor $endPos); }\n\n/// Background Size\n/// @param {Size} $width [100%] - Width\n/// @param {Size} $width [$width] - Height\n/// @require {mixin} css3-prefix\n\n@mixin background-size($width: 100%, $height: $width) {\n  @if type-of($width) == \"number\" and $height != null {\n    @include css3-prefix(\"background-size\", $width $height); }\n  @else {\n    @include css3-prefix(\"background-size\", $width); } }\n\n/// Background Color Opacity\n/// @param {Color} $color [100%] - Color\n/// @param {Double} $opacity [0.85] - Opacity\n\n@mixin background-opacity($color: #000, $opacity: 0.85) {\n  background: $color;\n  background: rgba($color, $opacity); }\n\n/// Border Radius\n/// @param {Size} $radius [5px] - Radius\n/// @require {mixin} css3-prefix\n\n@mixin border-radius($radius: 5px) {\n  @include css3-prefix(\"border-radius\", $radius); }\n\n/// Border Radius Separate\n/// @param {Size} $topLeftRadius [5px] - Top Left\n/// @param {Size} $topRightRadius [5px] - Top Right\n/// @param {Size} $bottomLeftRadius [5px] - Bottom Left\n/// @param {Size} $bottomRightRadius [5px] - Bottom Right\n\n@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {\n  -webkit-border-top-left-radius: $topLeftRadius;\n  -webkit-border-top-right-radius: $topRightRadius;\n  -webkit-border-bottom-right-radius: $bottomRightRadius;\n  -webkit-border-bottom-left-radius: $bottomLeftRadius;\n  -moz-border-radius-topleft: $topLeftRadius;\n  -moz-border-radius-topright: $topRightRadius;\n  -moz-border-radius-bottomright: $bottomRightRadius;\n  -moz-border-radius-bottomleft: $bottomLeftRadius;\n  border-top-left-radius: $topLeftRadius;\n  border-top-right-radius: $topRightRadius;\n  border-bottom-right-radius: $bottomRightRadius;\n  border-bottom-left-radius: $bottomLeftRadius; }\n\n/// Box\n/// @param {*} $orient [horizontal] - Orientation\n/// @param {*} $pack [center] - Pack\n/// @param {*} $align [center] - Align\n/// @require {mixin} css3-prefix\n\n@mixin box($orient: horizontal, $pack: center, $align: center) {\n  display: -webkit-box;\n  display: -moz-box;\n  display: box;\n  @include css3-prefix(\"box-orient\", $orient);\n  @include css3-prefix(\"box-pack\", $pack);\n  @include css3-prefix(\"box-align\", $align); }\n\n/// Box RGBA\n/// @param {Integer} $r [60] - Red\n/// @param {Integer} $g [3] - Green\n/// @param {Integer} $b [12] - Blue\n/// @param {Double} $opacity [0.23] - Opacity\n/// @param {Color} $color [#3C3C3C] - Color\n\n@mixin box-rgba($r: 60, $g: 3, $b: 12, $opacity: 0.23, $color: #3C3C3C) {\n  background-color: transparent;\n  background-color: rgba($r, $g, $b, $opacity);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{$color}',endColorstr='#{$color}');\n  zoom: 1; }\n\n/// Box Shadow\n/// @param {Size} $x [2px] - X\n/// @param {Size} $y [2px] - Y\n/// @param {Size} $blur [5px] - Blur\n/// @param {Color} $color [rgba(0,0,0,.4)] - Color\n/// @param {Boolean} $inset - Inset\n\n@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4), $inset: \"\") {\n  @if $inset != \"\" {\n    @include css3-prefix(\"box-shadow\", $inset $x $y $blur $color); }\n  @else {\n    @include css3-prefix(\"box-shadow\", $x $y $blur $color); } }\n\n/// Box Sizing\n/// @param {*} $type [border-box] - Type\n/// @require {mixin} css3-prefix\n\n@mixin box-sizing($type: border-box) {\n  @include css3-prefix(\"box-sizing\", $type); }\n\n/// Columns\n/// @param {Integer} $count [3] - Count\n/// @param {Integer} $gap [10] - Gap\n/// @require {mixin} css3-prefix\n\n@mixin columns($count: 3, $gap: 10) {\n  @include css3-prefix(\"column-count\", $count);\n  @include css3-prefix(\"column-gap\", $gap); }\n\n/// Double Borders\n/// @param {Color} $colorOne [#3C3C3C] - Color One\n/// @param {Color} $colorTwo [#999999] - Color Two\n/// @param {Size} $radius [0] - Radius\n/// @require {mixin} css3-prefix\n/// @require {mixin} border-radius\n\n@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) {\n  border: 1px solid $colorOne;\n  @include css3-prefix(\"box-shadow\", 0 0 0 1px $colorTwo);\n  @include border-radius($radius); }\n\n/// Flex\n/// @param {Integer} $value [1] - Value\n/// @require {mixin} css3-prefix\n\n@mixin flex($value: 1) {\n  @include css3-prefix(\"box-flex\", $value); }\n\n/// Flip\n/// @param {Double} $scaleX [-1] - ScaleX\n/// @require {mixin} css3-prefix\n\n@mixin flip($scaleX: -1) {\n  @include css3-prefix(\"transform\", scaleX($scaleX));\n  filter: FlipH;\n  -ms-filter: \"FlipH\"; }\n\n/// Font Face\n/// @param {Font} $fontFamily [myFont] - Font Family\n/// @param {String} $eotFileSrc ['myFont.eot'] - Eot File Source\n/// @param {String} $woffFileSrc ['myFont.woff'] - Woff File Source\n/// @param {String} $ttfFileSrc ['myFont.ttf'] - Ttf File Source\n/// @param {String} $svgFileSrc ['myFont.svg'] - Svg File Source\n\n@mixin font-face($fontFamily: myFont, $eotFileSrc: \"myFont.eot\", $woffFileSrc: \"myFont.woff\", $ttfFileSrc: \"myFont.ttf\", $svgFileSrc: \"myFont.svg\", $svgFontID: \"#myFont\") {\n  font-family: $fontFamily;\n  src: url($eotFileSrc) format(\"eot\"), url($woffFileSrc) format(\"woff\"), url($ttfFileSrc) format(\"truetype\"), url($svgFileSrc + $svgFontID) format(\"svg\"); }\n\n/// Opacity\n/// @param {Double} $opacity [0.5] - Opacity\n/// @require {mixin} css3-prefix\n\n@mixin opacity($opacity: 0.5) {\n  $opacityMultiplied: $opacity * 100;\n  filter: alpha(opacity = $opacityMultiplied);\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=\" + $opacityMultiplied + \")\";\n  @include css3-prefix(\"opacity\", $opacity); }\n\n/// Outline Radius\n/// @param {Size} $radius [5px] - Radius\n/// @require {mixin} css3-prefix\n\n@mixin outline-radius($radius: 5px) {\n  @include css3-prefix(\"outline-radius\", $radius); }\n\n/// Resize\n/// @param {*} $directoin [both] - Direction\n/// @require {mixin} css3-prefix\n\n@mixin resize($direction: both) {\n  @include css3-prefix(\"resize\", $direction); }\n\n/// Rotate\n//\n// / CSS Matrix Rotation Calculator http://www.boogdesign.com/examples/transforms/matrix-calculator.html\n// / @param {Double} $deg [0] - Degree\n// / @param {Double} $m11 [0] - M11\n// / @param {Double} $m12 [0] - M12\n// / @param {Double} $m21 [0] - M21\n// / @param {Double} $m22 [0] - M22\n// / @require {mixin} css3-prefix\n\n@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {\n  @include css3-prefix(\"transform\", rotate($deg + deg));\n  filter: progid:DXImageTransform.Microsoft.Matrix( M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');\n  zoom: 1; }\n\n// Browser Prefixes\n@mixin transform($transforms) {\n  -webkit-transform: $transforms;\n  -moz-transform: $transforms;\n  -ms-transform: $transforms;\n  transform: $transforms; }\n\n// Rotate\n@mixin rotate ($deg) {\n  @include transform(rotate(#{$deg}deg)); }\n\n// Scale\n@mixin scale($scale) {\n  @include transform(scale($scale)); }\n\n// Translate\n@mixin translate ($x, $y) {\n  @include transform(translate($x, $y)); }\n\n// Skew\n@mixin skew ($x, $y) {\n  @include transform(skew(#{$x}deg, #{$y}deg)); }\n\n/// Text Shadow\n/// @param {Size} $x [2px] - X\n/// @param {Size} $y [2px] - Y\n/// @param {Size} $blur [2px] - Blur\n/// @param {Color} $color [rgba(0,0,0,.4)] - Color\n\n@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4)) {\n  text-shadow: $x $y $blur $color; }\n\n/// Transform\n/// @param {List} $params - Params\n/// @require {mixin} css3-prefix\n\n@mixin transform($params) {\n  @include css3-prefix(\"transform\", $params); }\n\n@mixin translate3d($x, $y, $z) {\n  -webkit-transform: translate3d($x, $y, $z);\n  -moz-transform: translate3d($x, $y, $z);\n  -o-transform: translate3d($x, $y, $z);\n  transform: translate3d($x, $y, $z); }\n\n\n/// Transform-Origin\n/// @param {List} $params - Params\n/// @require {mixin} css3-prefix\n\n@mixin transform-origin($params) {\n  @include css3-prefix(\"transform-origin\", $params); }\n\n// Transform-Style\n/// @param {List} $params - Params\n/// @require {mixin} css3-prefix\n\n@mixin transform-style($style: preserve-3d) {\n  @include css3-prefix(\"transform-style\", $style); }\n\n/// Transition\n/// @param {List} $properties - Properties\n/// @require {mixin} css3-prefix\n\n// =transition($properties...)\n//   @if length($properties) >= 1\n//     +css3-prefix(\"transition\", $properties)\n//   @else\n//     +css3-prefix(\"transition\", \"all 0.2s ease-in-out 0s\")\n\n@mixin transition($property: all, $duration: .3s, $ease: linear) {\n  -webkit-transition: $property $duration $ease;\n  -moz-transition: $property $duration $ease;\n  -o-transition: $property $duration $ease;\n  transition: $property $duration $ease; }\n\n@mixin transform-delay($params) {\n  @include css3-prefix(\"transform-delay\", $params); }\n\n/// Triple Borders\n/// @param {Color} $colorOne [#3C3C3C] - Color One\n/// @param {Color} $colorTwo [#999999] - Color Two\n/// @param {Color} $colorThree [#000000] - Color Three\n/// @param {Size} $radius [0] - Radius\n/// @require {mixin} border-radius\n/// @require {mixin} css3-prefix\n\n@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {\n  border: 1px solid $colorOne;\n  @include border-radius($radius);\n  @include css3-prefix(\"box-shadow\", \"0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree}\"); }\n\n/// Keyframes\n/// @param {*} $animation-name - Animation name\n/// @content [Animation css]\n\n@mixin keyframes($animation-name) {\n  @-webkit-keyframes #{$animation-name} {\n    @content; }\n  @-moz-keyframes #{$animation-name} {\n    @content; }\n  @-ms-keyframes #{$animation-name} {\n    @content; }\n  @-o-keyframes #{$animation-name} {\n    @content; }\n  @keyframes #{$animation-name} {\n    @content; } }\n\n/// Animation\n/// @param {*} $str - name duration timing-function delay iteration-count direction fill-mode play-state ([http://www.w3schools.com/cssref/css3_pr_animation.asp](http://www.w3schools.com/cssref/css3_pr_animation.asp))\n/// @require {mixin} css3-prefix\n\n@mixin animation($str) {\n  @include css3-prefix(\"animation\", $str); }\n\n@mixin arrow($direction, $color, $size) {\n  display: block;\n  height: 0;\n  width: 0;\n  @if $direction == 'top' {\n    border-left: $size solid transparent;\n    border-right: $size solid transparent;\n    border-bottom: $size solid $color; }\n  @else if $direction == 'right' {\n    border-top: $size solid transparent;\n    border-bottom: $size solid transparent;\n    border-left: $size solid $color; }\n  @else if $direction == 'bottom' {\n    border-top: $size solid $color;\n    border-right: $size solid transparent;\n    border-left: $size solid transparent; }\n  @else if $direction == 'left' {\n    border-top: $size solid transparent;\n    border-right: $size solid $color;\n    border-bottom: $size solid transparent; }\n  @else if $direction == 'top-left' {\n    border-top: $size solid $color;\n    border-right: $size solid transparent; }\n  @else if $direction == 'top-right' {\n    border-top: $size solid $color;\n    border-left: $size solid transparent; }\n  @else if $direction == 'bottom-left' {\n    border-bottom: $size solid $color;\n    border-right: $size solid transparent; }\n  @else if $direction == 'bottom-right' {\n    border-bottom: $size solid $color;\n    border-left: $size solid transparent; } }\n","@mixin clearfix {\n  &:after {\n    content: '';\n    clear: both;\n    display: block; } }\n\n@mixin size($w, $h: auto) {\n\twidth: $w;\n\theight: $h; }\n\n@mixin flexCenter {\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center; }\n\n@mixin radius($radius: 100%) {\n\tborder-radius: $radius; }\n\n@mixin valign {\n\tposition: absolute;\n\ttop: 50%;\n\ttransform: translateY(-50%); }\n@mixin halign {\n\tposition: absolute;\n\tleft: 50%;\n\ttransform: translateX(-50%); }\n@mixin centeralign {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%); }\n\n@include keyframes(fadeIn) {\n  0% {\n    opacity: 0; }\n  100% {\n    opacity: 1; } }\n","@mixin breakpoint($size) {\n  // Small devices (landscape phones, 576px and up)\n  @if $size == sm {\n    @media (min-width: 575px) {\n      @content; } }\n  // Medium devices (tablets, 768px and up)\n  @else if $size == md {\n    @media (min-width: 768px) {\n      @content; } }\n  // Large devices (desktops, 992px and up)\n  @else if $size == lg {\n    @media (min-width: 992px) {\n      @content; } }\n  // Extra large devices (large desktops, 1200px and up)\n  @else if $size == xl {\n    @media (min-width: 1200px) {\n      @content; } } }\n\n//##Device = Desktops\n//##Screen = 1281px to higher resolution desktops\n//@media (min-width: 1281px)\n\n//##Device = Laptops, Desktops\n//##Screen = B/w 1025px to 1280px\n//@media (min-width: 1025px) and (max-width: 1280px)\n\n//##Device = Tablets, Ipads (portrait)\n//##Screen = B/w 768px to 1024px\n//@media (min-width: 768px) and (max-width: 1024px)\n\n//##Device = Tablets, Ipads (landscape)\n//##Screen = B/w 768px to 1024px\n//@media (min-width: 768px) and (max-width: 1024px) and (orientation: landscape)\n\n//##Device = Low Resolution Tablets, Mobiles (Landscape)\n//##Screen = B/w 481px to 767px\n//@media (min-width: 481px) and (max-width: 767px)\n\n//##Device = Most of the Smartphones Mobiles (Portrait)\n//##Screen = B/w 320px to 479px\n//@media (min-width: 320px) and (max-width: 480px)\n","@import 'mixins';\n@include breakpoint(md) {\n\tbody {\n\t\t.wrapper {\n\t\t\tmax-width: 1024px; }\n\t\t.mb {\n\t\t\tdisplay: none; }\n\t\t.pc {\n\t\t\tdisplay: block; } }\n\t.header {\n\t\tpadding: 10px 20px;\n\t\tmargin-bottom: 8px;\n\t\t&::after {\n\t\t\theight: 8px; }\n\t\timg {\n\t\t\theight: 37px; }\n\t\ta:first-child img {\n\t\t\theight: 30px; } }\n\t.bottom {\n\t\tborder-top: 8px solid #d8c8ad;\n\t\tul {\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: space-between; } }\n\t#menu {\n\t\tbackground: #000;\n\t\toverflow: hidden;\n\t\tul::before, ul::after {\n\t\t\tdisplay: none; }\n\t\ta {\n\t\t\tbackground: #e5e5e5 url('../images/bg_nav.png') no-repeat 0 0;\n\t\t\tbackground-size: 20% 100%;\n\t\t\tborder-top-left-radius: 10px;\n\t\t\tborder-top-right-radius: 10px;\n\t\t\ttransition: all, .15s; }\n\t\tspan {\n\t\t\tfont-size: 33px; }\n\t\tli {\n\t\t\twidth: 25%;\n\t\t\tfont-size: 25px;\n\t\t\t&:first-child a {\n\t\t\t\tbackground: #e5e5e5; }\n\t\t\t&:hover a, &.active a {\n\t\t\t\tcolor: #FFF;\n\t\t\t\tbackground: #ef4b23;\n\t\t\t\tbox-shadow: 0 0 10px rgba(#000, .5); }\n\t\t\t&:hover {\n\t\t\t\tz-index: 9; }\n\t\t\t&.active {\n\t\t\t\tz-index: 10; } }\n\t\t&.fixed {\n\t\t\twidth: 100%;\n\t\t\tmax-width: none;\n\t\t\tright: auto;\n\t\t\tmargin: 0 auto;\n\t\t\ttext-align: center;\n\t\t\tbackground: transparent;\n\t\t\tbox-shadow: 0 0 0 transparent;\n\t\t\tul {\n\t\t\t\tmargin: 0 auto;\n\t\t\t\tmax-width: 1024px; }\n\t\t\ta {\n\t\t\t\tbackground: #e5e5e5;\n\t\t\t\t@include radius(0); }\n\t\t\tli {\n\t\t\t\t& + li a::before {\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\twidth: 1px;\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tbackground: #FFF;\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tleft: 0;\n\t\t\t\t\ttop: 0; }\n\n\t\t\t\t&:hover a, &.active a {\n\t\t\t\t\tcolor: #FFF;\n\t\t\t\t\tbackground: #ef4b23;\n\t\t\t\t\tbox-shadow: 0 0 10px rgba(#000, .5);\n\t\t\t\t\t&::before {\n\t\t\t\t\t\tdisplay: none; } } } } }\n\t.acd {\n\t\tpadding: 40px; }\n\t.acd-body {\n\t\tpadding: 40px; }\n\t.acd-head {\n\t\tpadding: 10px 40px; }\n\t#note {\n\t\t.acd-body {\n\t\t\tp {\n\t\t\t\tfont-size: 25px; }\n\t\t\tli {\n\t\t\t\tmargin-bottom: 5px; } } }\n\t.info {\n\t\tfont-size: 18px;\n\t\tfont-weight: 300;\n\t\tline-height: 1.6;\n\t\t.title {\n\t\t\tfont-size: 22px;\n\t\t\timg {\n\t\t\t\twidth: 45px; } }\n\t\tol {\n\t\t\tmargin-bottom: 5px; }\n\t\tli img {\n\t\t\tmax-width: 700px;\n\t\t\tmargin: 0 auto; } }\n\t.deco-1, .deco-2 {\n\t\t.title {\n\t\t\theight: 70px;\n\t\t\tmargin-top: -30px; } }\n\n\t.para {\n\t\tpadding: 0 100px;\n\t\tli {\n\t\t\tmargin-bottom: 20px;\n\t\t\tspan {\n\t\t\t\tdisplay: block; } }\n\t\tol {\n\t\t\tdisplay: inline; } }\n\n\t.conditions {\n\t\tpadding: 0 100px;\n\t\tmargin-bottom: -25%;\n\t\tli {\n\t\t\tfont-size: 16px;\n\t\t\tol {\n\t\t\t\tmargin-left: 1em; } } }\n\n\t#qa {\n\t\tpadding: 0 40px 80px;\n\t\tbackground: #ef4b23 url('../images/bg_dot.png') repeat-x 100% 100%;\n\t\t.acd-item {\n\t\t\tmargin-bottom: 20px; }\n\t\t.acd-head {\n\t\t\tfont-size: 20px;\n\t\t\tfont-weight: 400;\n\t\t\tpadding: 20px 38px 20px 60px;\n\t\t\t&::before, &::after {\n\t\t\t\ttop: 0;\n\t\t\t\tbottom: 0; }\n\t\t\tspan {\n\t\t\t\twidth: 40px;\n\t\t\t\theight: 40px;\n\t\t\t\tfont-size: 28px;\n\t\t\t\tline-height: 1.5;\n\t\t\t\ttop: 0;\n\t\t\t\tbottom: 0;\n\t\t\t\tleft: 10px;\n\t\t\t\tmargin: auto; } }\n\t\t.acd-body {\n\t\t\tpadding: 25px 60px;\n\t\t\tli {\n\t\t\t\tfont-size: 17px; }\n\t\t\timg {\n\t\t\t\tmax-width: none;\n\t\t\t\tmargin-top: 10px; } } }\n\t#fund {\n\t\tpadding: 40px 10% 150px;\n\t\tbackground: url('../images/bg_yellow.png') repeat-x 100% 100%;\n\t\tli + li {\n\t\t\tmargin-top: 30px; }\n\t\t.acd-item {\n\t\t\tmax-width: 820px; }\n\t\t.acd-head {\n\t\t\t&::before, &::after {\n\t\t\t\twidth: 25px;\n\t\t\t\theight: 4px;\n\t\t\t\ttop: 50%;\n\t\t\t\tbottom: auto;\n\t\t\t\tright: 15px;\n\t\t\t\tmargin-top: 50px; } }\n\t\t.acd-body {\n\t\t\tpadding: 12px 24px 24px;\n\t\t\tp {\n\t\t\t\tcolor: #ffffff;\n\t\t\t\tfont-weight: 400;\n\t\t\t\tfont-size: 25px;\n\t\t\t\tmargin-bottom: 10px; }\n\t\t\ttable {\n\t\t\t\tfont-weight: 500;\n\t\t\t\tfont-size: 20px;\n\t\t\t\tborder-spacing: 5px; }\n\t\t\tth {\n\t\t\t\tpadding: 10px;\n\t\t\t\tfont-weight: 700; }\n\t\t\ttd {\n\t\t\t\tpadding: 10px; } } }\n\t#btns {\n\t\twidth: 100px;\n\t\tbottom: 90px; } }\n\n"]}